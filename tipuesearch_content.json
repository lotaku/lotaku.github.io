{"pages":[{"url":"http://lotaku.github.io/blog/pelican-learn.html","text":"学习材料 官方文档：http://docs.getpelican.com/en/3.3.0/ 介绍 可以在github上搭建一个全静态化的博客网站 安装等准备工作 http://docs.getpelican.com/en/3.3.0/getting_started.html pelican theme tool http://docs.getpelican.com/en/3.3.0/pelican-themes.html 开启/停止本地web服务器： alias myblogst = 'cd ~/app/myblog/ &&./develop_server.sh start' alias myblogsp = 'cd ~/app/myblog/ &&./develop_server.sh stop' 创建一个新的博客项目： 进入新建的目录，比如myblog目录 $pelican -quickstart 同步网站：(同步方法在执行pelican命令时可选) make rsync_upload 其他命令： 升级pelican：$ pip install --upgrade pelican 网站配置文件：pelicanconf.py 不使用content文件夹下的子目录做分类标志：USE_FOLDER_AS_CATEGORY = False 文章摘要长度：SUMMARY_MAX_LENGTH 设置提取文件名元数据的正则表达式：FILENAME_METADATA 是否在主目录显示page：DISPLAY_PAGES_ON_MENU 工具 Fabric :对一些pelican命令的封装 方便使用（我再也不用使用./bashrc的别名来执行pelican的命令，虽然还是很好用的） fab安装：pip install Fabric fab常用命令： 生成网站：fab build 重新生成网站：fab regenerate 启动web服务器：fab serve 开启ssh:fab publish Make:也是一些pelican命令的封装 生成网站：make html 重新生成网站：make regenerate 启动web服务器：make serve 重新生成网站并且再次启动web服务器：make devserver 设置评论：disqus 注册并登录 http://disqus.com/ 添加新的网站 Site name ： { 任意名字 } Choose your unique Disqus URL: { lotaku } .disqus.com #lotaku是短域名，要记住的！在pelicanconf.py的配置中要用到。 进入Admin > Settings > Advanced,将以下域名添加到 Trusted Domains lotaku.github.io #我的博客域名 127 .0.0.1 #本地调试域名 localhost #本地调试域名 打开博客项目根目录下的配置文件 #pelicanconf.py 添加: SITEURL = 'http://lotaku.github.io' #如果要在本地调试测试显示disqus,修改SITEURL #SITEURL = 'http://127.0.0.1:8000' THEME = u '/home/l/app/myblog3/mytheme/pelican-elegant-1.3' DISQUS_SITENAME = u 'lotaku' 主题设置 使用中的主题： pelican-elegant-1.3 使用记录 #在pelicanconf.py 中添加,以下代码，主题的搜索等功能需要 PLUGINS = [ 'sitemap' , 'extract_toc' , 'tipue_search' ] MD_EXTENSIONS = [ 'codehilite(css_class=highlight)' , 'extra' , 'headerid' , 'toc' ] DIRECT_TEMPLATES = (( 'index' , 'tags' , 'categories' , 'archives' , 'search' , '404' )) STATIC_PATHS = [ 'theme/images' , 'images' ] TAG_SAVE_AS = '' CATEGORY_SAVE_AS = '' AUTHOR_SAVE_AS = '' 备份整个博客 alias myblogbackup_to_dropbox = 'cp -r ~/app/myblog/* ~/Dropbox/myblog/'","tags":"Tools","title":"Pelican 学习笔记"},{"url":"http://lotaku.github.io/blog/http-status-code.html","text":"一、什么是HTTP Status Code 客户机与服务器建立连接后，发送一个请求给服务器（如：Get /index.html http/1.1），在服务器接到请求后，给予客户机相应的响应信息，包括该信息的协议版本号、HTTP协议状态码、服务器信息、实体信息、内容等（如：http/1.1 200 ok）。在通讯时，客户端发出连接请求，服务器端建立连接，客户端发出HTTP请求，服务器端返回响应信息，由此完成一个HTTP操作。 二、HTTP Status Code的意思 #1XX 都表示临时响应，客户端在收到常规响应前，会接受一个或多个1XX响应 100 继续 101 切换协议 #2XX 表示服务器端成功接受客户端请求 200 服务器成功处理请求 201 已创建 202 已接受 203 非权威性信息 204 无内容 205 重置内容 206 部分内容 #3XX 表示重定向，客户端必须采取更多操作来实现请求 300 多种选择 301 永久重定向 302 对象临时移走 303 查看其他位置 304 未修改 305 使用代理 307 临时重定向 #4XX 表示客户端的请求有错误 400 请求错误，服务器端不理解客户端的请求 401 验证失败 403 服务器拒绝访问 404 服务器找不到请求的网页 405 方法禁用 406 客户端浏览器不接受所请求页面的MIME类型 407 需要代理授权 408 请求超时 409 服务器完成请求时冲突 410 资源已永久删除 411 需要有效长度 412 未满足前提条件 413 请求实体过大 414 请求的URL过长 415 不支持的媒体类型 416 请求范围不合要求 417 执行失败 #5XX 表示服务器遇到错误无法完成客户端请求 500 内部服务器错误 501 服务器不支持的请求 502 网关错误 503 服务不可用（一般是临时性的） 504 网关超时 505 HTTP版本不支持 三、一些实际体会 在实际应用中，经常会碰到的协议状态码主要包括200、301、302、401、403、404、408、413、414、500、503、504这些，了解了这些代码所对应的意义，以及出现这些代码所意味的服务器或客户端的一些问题，以及常见问题的解决方法，工作起来效率会提高很多。","tags":"web","title":"HTTP Status Code"},{"url":"http://lotaku.github.io/blog/hello-world.html","text":"生命苦短 我用Python哟~","tags":"Entertainment","title":"嘿嘿！Hello World!"}]}