{"pages":[{"text":"Lotaku - \u7f57\u5854\u5e93 pythoner\uff0cvimer, Linux\u4e2d\u5ea6\u7528\u6237 \u5728\u6f6e\u6c55\u4e00\u4e2a\u666e\u901a\u7684\u519c\u6751\u5bb6\u5ead\u957f\u5927\uff0c\u63a5\u89e6\u7535\u8111\u6bd4\u8f83\u665a,\u8ba4\u8bc6\u4e92\u8054\u7f51\u5c31\u66f4\u665a\u4e86,\u4f46\u8fd8\u662f\u5728\u4e00\u5f00\u59cb\u7684\u65f6\u5019\u5c31\u7231\u4e0a\u4e86\u8fd9\u4e2a\u7f51\u7edc\u4e16\u754c\uff0c\u6ca1\u6709\u4eba\u6559\u5bfc\uff0c\u53ea\u80fd\u81ea\u5df1\u6478\u7d22\u3002 \u73b0\u8fd9\u6837\u5427\u3002 \u90ae\u4ef6\uff1aqq317399510#gmail.com github:https://github.com/lotaku","tags":"pages","loc":"http://lotaku.github.io/pages/about-me.html","title":"\u5173\u4e8e\u6211"},{"text":"user \u7528\u6237 \u5207\u6362linux\u7528\u6237\u4e3a postgres sudo su postgres ============ \u4fee\u6539 \u6570\u636e\u5e93\u7528\u6237 \u5bc6\u7801 sudo -u postgres psql -c \"ALTER USER postgres PASSWORD 'postgres';\" ==== sudo -u postgres psql ======\u521b\u5efa16ss\u7528\u6237 su root su postgres createuser 16ss =======\u5220\u9664\u7528\u6237=== sudo userdel xxx \u53c2\u8003\uff1ahttp://stackoverflow.com/questions/7695962/postgresql-password-authentication-failed-for-user-postgres","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/postgresql.html","title":"PostgreSQL"},{"text":"\u4e00\u3001\u4ec0\u4e48\u662fHTTP Status Code \u5ba2\u6237\u673a\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u540e\uff0c\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u7ed9\u670d\u52a1\u5668\uff08\u5982\uff1aGet /index.html http/1.1\uff09\uff0c\u5728\u670d\u52a1\u5668\u63a5\u5230\u8bf7\u6c42\u540e\uff0c\u7ed9\u4e88\u5ba2\u6237\u673a\u76f8\u5e94\u7684\u54cd\u5e94\u4fe1\u606f\uff0c\u5305\u62ec\u8be5\u4fe1\u606f\u7684\u534f\u8bae\u7248\u672c\u53f7\u3001HTTP\u534f\u8bae\u72b6\u6001\u7801\u3001\u670d\u52a1\u5668\u4fe1\u606f\u3001\u5b9e\u4f53\u4fe1\u606f\u3001\u5185\u5bb9\u7b49\uff08\u5982\uff1ahttp/1.1 200 ok\uff09\u3002\u5728\u901a\u8baf\u65f6\uff0c\u5ba2\u6237\u7aef\u53d1\u51fa\u8fde\u63a5\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u7aef\u5efa\u7acb\u8fde\u63a5\uff0c\u5ba2\u6237\u7aef\u53d1\u51faHTTP\u8bf7\u6c42\uff0c\u670d\u52a1\u5668\u7aef\u8fd4\u56de\u54cd\u5e94\u4fe1\u606f\uff0c\u7531\u6b64\u5b8c\u6210\u4e00\u4e2aHTTP\u64cd\u4f5c\u3002 \u4e8c\u3001HTTP Status Code\u7684\u610f\u601d 1XX \u90fd\u8868\u793a\u4e34\u65f6\u54cd\u5e94\uff0c\u5ba2\u6237\u7aef\u5728\u6536\u5230\u5e38\u89c4\u54cd\u5e94\u524d\uff0c\u4f1a\u63a5\u53d7\u4e00\u4e2a\u6216\u591a\u4e2a1XX\u54cd\u5e94 100 \u7ee7\u7eed 101 \u5207\u6362\u534f\u8bae 2XX \u8868\u793a\u670d\u52a1\u5668\u7aef\u6210\u529f\u63a5\u53d7\u5ba2\u6237\u7aef\u8bf7\u6c42 200\u670d\u52a1\u5668\u6210\u529f\u5904\u7406\u8bf7\u6c42 201 \u5df2\u521b\u5efa 202 \u5df2\u63a5\u53d7 203 \u975e\u6743\u5a01\u6027\u4fe1\u606f 204 \u65e0\u5185\u5bb9 205 \u91cd\u7f6e\u5185\u5bb9 206 \u90e8\u5206\u5185\u5bb9 3XX \u8868\u793a\u91cd\u5b9a\u5411\uff0c\u5ba2\u6237\u7aef\u5fc5\u987b\u91c7\u53d6\u66f4\u591a\u64cd\u4f5c\u6765\u5b9e\u73b0\u8bf7\u6c42 300 \u591a\u79cd\u9009\u62e9 301 \u6c38\u4e45\u91cd\u5b9a\u5411 302 \u5bf9\u8c61\u4e34\u65f6\u79fb\u8d70 303 \u67e5\u770b\u5176\u4ed6\u4f4d\u7f6e 304 \u672a\u4fee\u6539 305 \u4f7f\u7528\u4ee3\u7406 307 \u4e34\u65f6\u91cd\u5b9a\u5411 4XX \u8868\u793a\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6709\u9519\u8bef 400 \u8bf7\u6c42\u9519\u8bef\uff0c\u670d\u52a1\u5668\u7aef\u4e0d\u7406\u89e3\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42 401 \u9a8c\u8bc1\u5931\u8d25 403 \u670d\u52a1\u5668\u62d2\u7edd\u8bbf\u95ee 404 \u670d\u52a1\u5668\u627e\u4e0d\u5230\u8bf7\u6c42\u7684\u7f51\u9875 405 \u65b9\u6cd5\u7981\u7528 406 \u5ba2\u6237\u7aef\u6d4f\u89c8\u5668\u4e0d\u63a5\u53d7\u6240\u8bf7\u6c42\u9875\u9762\u7684MIME\u7c7b\u578b 407 \u9700\u8981\u4ee3\u7406\u6388\u6743 408 \u8bf7\u6c42\u8d85\u65f6 409 \u670d\u52a1\u5668\u5b8c\u6210\u8bf7\u6c42\u65f6\u51b2\u7a81 410 \u8d44\u6e90\u5df2\u6c38\u4e45\u5220\u9664 411 \u9700\u8981\u6709\u6548\u957f\u5ea6 412 \u672a\u6ee1\u8db3\u524d\u63d0\u6761\u4ef6 413 \u8bf7\u6c42\u5b9e\u4f53\u8fc7\u5927 414 \u8bf7\u6c42\u7684URL\u8fc7\u957f 415 \u4e0d\u652f\u6301\u7684\u5a92\u4f53\u7c7b\u578b 416 \u8bf7\u6c42\u8303\u56f4\u4e0d\u5408\u8981\u6c42 417 \u6267\u884c\u5931\u8d25 5XX \u8868\u793a\u670d\u52a1\u5668\u9047\u5230\u9519\u8bef\u65e0\u6cd5\u5b8c\u6210\u5ba2\u6237\u7aef\u8bf7\u6c42 500 \u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef 501 \u670d\u52a1\u5668\u4e0d\u652f\u6301\u7684\u8bf7\u6c42 502 \u7f51\u5173\u9519\u8bef 503 \u670d\u52a1\u4e0d\u53ef\u7528\uff08\u4e00\u822c\u662f\u4e34\u65f6\u6027\u7684\uff09 504 \u7f51\u5173\u8d85\u65f6 505 HTTP\u7248\u672c\u4e0d\u652f\u6301 \u4e09\u3001\u4e00\u4e9b\u5b9e\u9645\u4f53\u4f1a \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u7ecf\u5e38\u4f1a\u78b0\u5230\u7684\u534f\u8bae\u72b6\u6001\u7801\u4e3b\u8981\u5305\u62ec200\u3001301\u3001302\u3001401\u3001403\u3001404\u3001408\u3001413\u3001414\u3001500\u3001503\u3001504\u8fd9\u4e9b\uff0c\u4e86\u89e3\u4e86\u8fd9\u4e9b\u4ee3\u7801\u6240\u5bf9\u5e94\u7684\u610f\u4e49\uff0c\u4ee5\u53ca\u51fa\u73b0\u8fd9\u4e9b\u4ee3\u7801\u6240\u610f\u5473\u7684\u670d\u52a1\u5668\u6216\u5ba2\u6237\u7aef\u7684\u4e00\u4e9b\u95ee\u9898\uff0c\u4ee5\u53ca\u5e38\u89c1\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6cd5\uff0c\u5de5\u4f5c\u8d77\u6765\u6548\u7387\u4f1a\u63d0\u9ad8\u5f88\u591a\u3002 \u8f6c\u8f7d\uff1a \u767e\u5ea6\u6587\u5e93","tags":"other","loc":"http://lotaku.github.io/http-status-code.html","title":"HTTP\u00a0Status\u00a0Code\u7684\u4e00\u4e9b\u603b\u7ed3"},{"text":"\u95ee\u9898\uff1a\u5728 git clone \u6216\u8005 git add remote {server} \u65f6\uff0c\u62a5\u9519\uff0c\u8bf4\u8bc1\u4e66\u6821\u9a8c\u6709\u95ee\u9898 #\u62a5\u9519\u4ee3\u7801 error: server certificate verification failed . CAfile : / etc / ssl / certs / ca - certificates . crt CRLfile : none \u89e3\u51b3\u65b9\u6cd5 1 \uff1a\u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6cd5\u662f\u8c03\u7528\u524d\u52a0\u4e00\u4e2a\u73af\u5883\u53d8\u91cf\uff1a $ export GIT_SSL_NO_VERIFY = 1 \u89e3\u51b3\u65b9\u6cd5 2 \uff1a\u6bd41\u66f4\u597d. $ git config -- global http . sslverify false \u53c2\u8003\uff1a http://blog.csdn.net/ubuntu64fan/article/details/12373403 \u95ee\u9898\uff1aGit \u6bcf\u6b21\u63d0\u4ea4\u65f6\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u8bbe\u7f6e \u539f\u56e0\uff1a\u5728\u514b\u9686\uff08clone\uff09\u5206\u652f\u65f6\u4f7f\u7528\u4e86 HTTPS \u7684\u5730\u5740 \u89e3\u51b3\u65b9\u6cd5\uff1a\u5207\u6362\u5230 SSH \u65b9\u5f0f,\u53ef\u4ee5\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002 #\u8fdb\u5165\u672c\u5730\u7684git\u9879\u76ee $ git remote set - url origin git @ github . com : user / repo . git \u95ee\u9898:commit\u65f6\u51fa\u73b0 Permission denied (publickey). \u539f\u56e0\uff1a SSH key \u6ca1\u6709\u8bbe\u7f6e\u6216\u5df2\u7ecf\u5931\u6548\uff08\u8b6c\u5982\u5347\u7ea7\u5230 Mountain Lion \u7cfb\u7edf\u540e\uff09 \u89e3\u51b3\u65b9\u6cd5\uff1a\u53c2\u8003 \u5b98\u65b9\u6587\u6863 \u3002","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/git-question-answer.html","title":"git \u95ee\u9898\u8bb0\u5f55\u53ca\u89e3\u51b3\u65b9\u6cd5"},{"text":"git\u5728\u7ebf\u7535\u5b50\u4e66\u5b66\u4e60\u9879\u76ee python\u6293\u53d6\u7f51\u9875\u5b66\u4e60\uff081\uff09--urllib/urllib2/requests","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/to-do-list.html","title":"To Do List"},{"text":"\u5b89\u88c5 $ pip install Markdown \u5b66\u4e60 \u67d0\u7f51\u5740\u3002\u3002\u3002","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/bo-wen-shu-xie-yu-yan-markdown.html","title":"\u535a\u6587\u4e66\u5199\u8bed\u8a00-Markdown"},{"text":"\u5b66\u4e60\u6750\u6599 \u5b98\u65b9\u6587\u6863\uff1a http://docs.getpelican.com/en/3.3.0/ \u4ecb\u7ecd \u53ef\u4ee5\u5728github\u4e0a\u642d\u5efa\u4e00\u4e2a\u5168\u9759\u6001\u5316\u7684\u535a\u5ba2\u7f51\u7ad9 \u5b89\u88c5\u7b49\u51c6\u5907\u5de5\u4f5c http://docs.getpelican.com/en/3.3.0/getting_started.html pelican theme tool http://docs.getpelican.com/en/3.3.0/pelican-themes.html \u5e38\u7528\u547d\u4ee4 \u67e5\u770b\u5e2e\u52a9\uff1a $ pelican --help \u5f00\u542f/\u505c\u6b62\u672c\u5730web\u670d\u52a1\u5668\uff1a alias myblogst = ' cd ~/ app / myblog / && . / develop_server . sh start ' alias myblogsp = ' cd ~/ app / myblog / && . / develop_server . sh stop ' \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u535a\u5ba2\u9879\u76ee\uff1a #\u8fdb\u5165\u65b0\u5efa\u7684\u76ee\u5f55\uff0c\u6bd4\u5982myblog\u76ee\u5f55 $ pelican - quickstart \u540c\u6b65\u7f51\u7ad9\uff1a(\u540c\u6b65\u65b9\u6cd5\u5728\u6267\u884cpelican\u547d\u4ee4\u65f6\u53ef\u9009) make rsync_upload \u5176\u4ed6\u547d\u4ee4\uff1a \u5347\u7ea7pelican\uff1a $ pip install --upgrade pelican \u7f51\u7ad9\u914d\u7f6e\u6587\u4ef6\uff1apelicanconf.py \u4e0d\u4f7f\u7528content\u6587\u4ef6\u5939\u4e0b\u7684\u5b50\u76ee\u5f55\u505a\u5206\u7c7b\u6807\u5fd7\uff1a USE_FOLDER_AS_CATEGORY=False \u6587\u7ae0\u6458\u8981\u957f\u5ea6\uff1a SUMMARY_MAX_LENGTH \u8bbe\u7f6e\u63d0\u53d6\u6587\u4ef6\u540d\u5143\u6570\u636e\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff1a FILENAME_METADATA \u662f\u5426\u5728\u4e3b\u76ee\u5f55\u663e\u793apage\uff1a DISPLAY_PAGES_ON_MENU \u5de5\u5177 Fabric :\u5bf9\u4e00\u4e9bpelican\u547d\u4ee4\u7684\u5c01\u88c5 \u65b9\u4fbf\u4f7f\u7528\uff08\u6211\u518d\u4e5f\u4e0d\u7528\u4f7f\u7528./bashrc\u7684\u522b\u540d\u6765\u6267\u884cpelican\u7684\u547d\u4ee4\uff0c\u867d\u7136\u8fd8\u662f\u5f88\u597d\u7528\u7684\uff09 fab\u5b89\u88c5\uff1a pip install Fabric fab\u5e38\u7528\u547d\u4ee4\uff1a \u751f\u6210\u7f51\u7ad9\uff1a fab build \u91cd\u65b0\u751f\u6210\u7f51\u7ad9\uff1a fab regenerate \u542f\u52a8web\u670d\u52a1\u5668\uff1a fab serve \u5f00\u542fssh: fab publish Make :\u4e5f\u662f\u4e00\u4e9bpelican\u547d\u4ee4\u7684\u5c01\u88c5 \u751f\u6210\u7f51\u7ad9\uff1a make html \u91cd\u65b0\u751f\u6210\u7f51\u7ad9\uff1a make regenerate \u542f\u52a8web\u670d\u52a1\u5668\uff1a make serve \u91cd\u65b0\u751f\u6210\u7f51\u7ad9\u5e76\u4e14\u518d\u6b21\u542f\u52a8web\u670d\u52a1\u5668\uff1a make devserver \u8bbe\u7f6e\u8bc4\u8bba\uff1adisqus \u6ce8\u518c\u5e76\u767b\u5f55 http://disqus.com/ \u6dfb\u52a0\u65b0\u7684\u7f51\u7ad9 Site name \uff1a { \u4efb\u610f\u540d\u5b57 } Choose your unique Disqus URL : { lotaku }. disqus . com #lotaku\u662f\u77ed\u57df\u540d\uff0c\u8981\u8bb0\u4f4f\u7684\uff01\u5728pelicanconf.py\u7684\u914d\u7f6e\u4e2d\u8981\u7528\u5230\u3002 \u8fdb\u5165Admin > Settings > Advanced,\u5c06\u4ee5\u4e0b\u57df\u540d\u6dfb\u52a0\u5230 Trusted Domains lotaku . github . io #\u6211\u7684\u535a\u5ba2\u57df\u540d 127.0.0.1 #\u672c\u5730\u8c03\u8bd5\u57df\u540d localhost #\u672c\u5730\u8c03\u8bd5\u57df\u540d \u6253\u5f00\u535a\u5ba2\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684\u914d\u7f6e\u6587\u4ef6 #pelicanconf.py \u6dfb\u52a0: SITEURL = ' http : //lotaku.github.io' #\u5982\u679c\u8981\u5728\u672c\u5730\u8c03\u8bd5\u6d4b\u8bd5\u663e\u793adisqus,\u4fee\u6539SITEURL #SITEURL = 'http: //127.0.0.1:8000' THEME = u ' / home / l / app / myblog3 / mytheme / pelican - elegant - 1.3 ' DISQUS_SITENAME = u ' lotaku ' \u4e3b\u9898\u8bbe\u7f6e \u4f7f\u7528\u4e2d\u7684\u4e3b\u9898\uff1apelican-elegant-1.3 \u5730\u5740\uff1a http://oncrashreboot.com/elegant-best-pelican-theme-features #\u4f7f\u7528\u8bb0\u5f55 #\u5728pelicanconf.py \u4e2d\u6dfb\u52a0,\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e3b\u9898\u7684\u641c\u7d22\u7b49\u529f\u80fd\u9700\u8981 PLUGINS = [ ' sitemap ' , ' extract_toc ' , ' tipue_search ' ] MD_EXTENSIONS = [ ' codehilite ( css_class = highlight ) ' , ' extra ' , ' headerid ' , ' toc ' ] DIRECT_TEMPLATES = (( ' index ' , ' tags ' , ' categories ',' archives ' , ' search ' , ' 404 ' )) STATIC_PATHS = [ ' theme / images ' , ' images ' ] TAG_SAVE_AS = '' CATEGORY_SAVE_AS = '' AUTHOR_SAVE_AS = '' \u5907\u4efd\u6574\u4e2a\u535a\u5ba2 alias myblogbackup_to_dropbox = ' cp - r ~/ app / myblog /* ~/ Dropbox / myblog / '","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/pelican-learn.html","title":"Pelican \u5b66\u4e60\u7b14\u8bb0"},{"text":"Python \u6253\u5305\u65b9\u6848\uff1adistutils http://developer.51cto.com/art/201003/189317.htm","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/python-da-bao-fang-an-distutils.html","title":"Python \u6253\u5305\u65b9\u6848\uff1adistutils"},{"text":"\u7b80\u5355\u793a\u4f8b \u521b\u5efa\u4e00\u4e2aforms.py\u6587\u4ef6\uff0c\u653e\u5728app\u7684\u76ee\u5f55\u4e0b\uff0c\u4e0eviews.py\u5728\u540c\u4e2a\u76ee\u5f55\u4e0b\u3002\u5f53\u7136,\u8fd9\u4e2a\u4e0d\u662f\u786c\u6027\u8981\u6c42\u3002 from django import forms class ContactForm ( forms . Form ) : subject = forms . CharField () email = forms . EmailField ( required = False ) message = forms . CharField () \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5bf9Form\u8c61\uff0c\u5e76\u4e14\u4f20\u5165\u4e00\u4e2a\u4e0e\u5b9a\u4e49\u5339\u914d\u7684\u5b57\u5178\u7c7b\u578b\u6570\u636e\uff1a6 >>> f = ContactForm ({ ' subject ' : ' Hello ' , ' email ' : ' adrian @ example . com ' , ' message ' : ' Nice site ! ' }) \u4e00\u65e6\u4f60\u5bf9\u4e00\u4e2aForm\u5b9e\u4f53\u8d4b\u503c\uff0c\u4f60\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u7ed1\u5b9aform\uff1a >>> f . is_bound True \u8c03\u7528\u4efb\u4f55\u7ed1\u5b9aform\u7684is_valid()\u65b9\u6cd5\uff0c\u5c31\u53ef\u4ee5\u77e5\u9053\u5b83\u7684\u6570\u636e\u662f\u5426\u5408\u6cd5\u3002 \u6211\u4eec\u5df2\u7ecf\u4e3a\u6bcf\u4e2a\u5b57\u6bb5\u4f20\u5165\u4e86\u503c\uff0c\u56e0\u6b64\u6574\u4e2aForm\u662f\u5408\u6cd5\u7684\uff1a3 >>> f . is_valid () True \u6bcf\u4e00\u4e2a\u90a6\u5b9aForm\u5b9e\u4f53\u90fd\u6709\u4e00\u4e2aerrors\u5c5e\u6027\uff0c\u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b57\u6bb5\u4e0e\u9519\u8bef\u6d88\u606f\u76f8\u6620\u5c04\u7684\u5b57\u5178\u8868\u30026 >>> f = ContactForm ({ ' subject ' : ' Hello ' , ' message ' : '' }) >>> f . errors { ' message ' : [ u ' This field is required . ' ]} \u6700\u7ec8\uff0c\u5982\u679c\u4e00\u4e2aForm\u5b9e\u4f53\u7684\u6570\u636e\u662f\u5408\u6cd5\u7684\uff0c\u5b83\u5c31\u4f1a\u6709\u4e00\u4e2a\u53ef\u7528\u7684cleaned_data\u5c5e\u6027\u3002 \u8fd9\u662f\u4e00\u4e2a\u5305\u542b\u5e72\u51c0\u7684\u63d0\u4ea4\u6570\u636e\u7684\u5b57\u5178\u3002 Django\u7684form\u6846\u67b6\u4e0d\u4f46\u6821\u9a8c\u6570\u636e\uff0c\u5b83\u8fd8\u4f1a\u628a\u5b83\u4eec\u8f6c\u6362\u6210\u76f8\u5e94\u7684Python\u7c7b\u578b\u6570\u636e\uff0c\u8fd9\u53eb\u505a\u6e05\u7406\u6570\u636e\u30022 >>> f = ContactForm ({ subject ' : Hello , email : adrian @ example . com , message : Nice site ! }) >>> f . is_valid () True >>> f . cleaned_data { message ' : uNice site ! , email : uadrian @ example . com , subject : uHello } \u6211\u4eec\u7684contact form\u53ea\u6d89\u53ca\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u5b83\u4eec\u4f1a\u88ab\u6e05\u7406\u6210Unicode\u5bf9\u8c61\u3002\u5982\u679c\u6211\u4eec\u4f7f\u7528\u6574\u6570\u578b\u6216\u65e5\u671f\u578b\uff0cform\u6846\u67b6\u4f1a\u786e\u4fdd\u65b9\u6cd5\u4f7f\u7528\u5408\u9002\u7684Python\u6574\u6570\u578b\u6216datetime.date\u578b\u5bf9\u8c61\u3002 \u8bbe\u7f6e\u521d\u59cb\u503c form = ContactForm ( initial = { ' subject ' : ' I love your site ! ' } ) \u81ea\u5b9a\u4e49\u6821\u9a8c\u89c4\u5219 from django import forms class ContactForm ( forms . Form ) : subject = forms . CharField ( max_length = 100 ) email = forms . EmailField ( required = False ) message = forms . CharField ( widget = forms . Textarea ) def clean_message ( self ) : message = self . cleaned_data [ ' message ' ] num_words = len ( message . split ()) if num_words < 4 : raise forms . ValidationError ( \"Not enough words!\" ) return message Django\u7684form\u7cfb\u7edf\u81ea\u52a8\u5bfb\u627e\u5339\u914d\u7684\u51fd\u6570\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u540d\u79f0\u4ee5clean_\u5f00\u5934\uff0c\u5e76\u4ee5\u5b57\u6bb5\u540d\u79f0\u7ed3\u675f\u3002 \u5982\u679c\u6709\u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u5b83\u5c06\u5728\u6821\u9a8c\u65f6\u88ab\u8c03\u7528\u3002 \u6307\u5b9a\u6807\u7b7e class ContactForm ( forms . Form ) : subject = forms . CharField ( max_length = 100 ) email = forms . EmailField ( required = False , ** label = ' Your e - mail address ' ** ) message = forms . CharField ( widget = forms . Textarea )","tags":"django","loc":"http://lotaku.github.io/django-biao-dan.html","title":"Django-\u8868\u5355"},{"text":"\u5f00\u542f\u670d\u52a1\u5668 python manage . py runserver or python manage . py runserver 8000 or python manage . py runserver 0.0.0.0 : 8000","tags":"django","loc":"http://lotaku.github.io/djangochang-yong-ming-ling.html","title":"Django\u5e38\u7528\u547d\u4ee4"},{"text":"URLconf \u6280\u5de7:\u51cf\u5c11\u91cd\u590d\u8f93\u5165 1.\u6211\u4eec\u53ef\u4ee5\u628a\u516c\u5171\u7684\u524d\u7f00\u63d0\u53d6\u51fa\u6765\uff0c\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u4f20\u7ed9urlpatterns\u51fd from django . conf . urls . defaults import * urlpatterns = patterns ( ** ' mysite . views ' ** , ( r ' &#94; hello / $' , ** ' hello ' ** ), ( r ' &#94; time / $' , ** ' current_datetime ' ** ), ( r ' &#94; time / plus / ( d { 1 , 2 }) / $' , ** ' hours_ahead ' ** ), ) 2.\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u5305\u542b\u6a21\u5757\u540d\u548c\u51fd\u6570\u540d\u7684\u5b57\u7b26\u4e32\uff0c\u800c\u4e0d\u662f\u51fd\u6570\u5bf9\u8c61\u672c\u8eab from django . conf . urls . defaults import * urlpatterns = patterns ( '' , ( r ' &#94; hello / $' , ** ' mysite . views . hello ' ** ), ( r ' &#94; time / $' , ** ' mysite . views . current_datetime ' ** ), ( r ' &#94; time / plus / ( d { 1 , 2 }) / $' , ** ' mysite . views . hours_ahead ' ** ), ) 3.\u4f7f\u7528\u591a\u4e2a\u89c6\u56fe\u524d\u7f00 from django . conf . urls . defaults import * urlpatterns = patterns ( ' mysite . views ' , ( r ' &#94; hello / $' , ' hello ' ), ( r ' &#94; time / $' , ' current_datetime ' ), ( r ' &#94; time / plus / ( \\ d { 1 , 2 }) / $' , ' hours_ahead ' ), ) urlpatterns += patterns ( ' weblog . views ' , ( r ' &#94; tag / ( \\ w + ) / $' , ' tag ' ), ) \u8c03\u8bd5\u6a21\u5f0f\u4e2d\u7684\u7279\u4f8b \u8bf4\u5230\u52a8\u6001\u6784\u5efa urlpatterns\uff0c\u4f60\u53ef\u80fd\u60f3\u5229\u7528\u8fd9\u4e00\u6280\u672f\uff0c\u5728 Django \u7684\u8c03\u8bd5\u6a21\u5f0f\u4e0b\u4fee\u6539 URLconf \u7684\u884c\u4e3a\u3002 \u4e3a\u4e86\u505a\u5230\u8fd9\u4e00\u70b9\uff0c\u53ea\u8981\u5728\u8fd0\u884c\u65f6\u68c0\u67e5 DEBUG \u914d\u7f6e\u9879\u7684\u503c\u5373\u53ef\uff0c\u5982: from django . conf import settings from django . conf . urls . defaults import * from mysite import views urlpatterns = patterns ( '' , ( r ' &#94; $' , views . homepage ), ( r ' &#94; ( \\ d { 4 }) / ([ a - z ]{ 3 }) / $' , views . archive_month ), ) if settings . DEBUG : urlpatterns += patterns ( '' , ( r ' &#94; debuginfo / $' , views . debug ), ) \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0cURL\u94fe\u63a5/debuginfo/ \u53ea\u5728\u4f60\u7684 DEBUG \u914d\u7f6e\u9879\u8bbe\u4e3a True \u65f6\u624d\u6709\u6548\u3002 URLconf\uff0c\u4f7f\u7528\u547d\u540d\u7ec4 urlpatterns = patterns ( '' , ( r '&#94;articles/(?P<year>\\d{4})/$' , views.year_archive ), ( r '&#94;articles/(?P<year>\\d{4})/(?P<month>\\d{2})/$' , views.month_archive ), ) \u5bf9\u4e00\u4e2a\u53ef\u9009URL\u914d\u7f6e\u53c2\u6570\u7684\u4f18\u96c5\u89e3\u51b3\u65b9\u6cd5\uff1a URLconf\u91cc\u9762\u7684\u6bcf\u4e00\u4e2a\u6a21\u5f0f\u90fd\u53ef\u4ee5\u5305\u542b\u7b2c\u4e09\u4e2a\u6570\u636e\uff1a \u4e00\u4e2a\u5173\u952e\u5b57\u53c2\u6570\u7684\u5b57\u5178\uff1a # urls.py from django . conf . urls . defaults import * from mysite import views urlpatterns = patterns ( '' , ( r ' &#94; foo / $' , views . foobar_view , { ' template_name ' : ' template1 . html ' }), ( r ' &#94; bar / $' , views . foobar_view , { ' template_name ' : ' template2 . html ' }), ) # views.py from django . shortcuts import render_to_response from mysite . models import MyModel def foobar_view ( request , template_name ) : m_list = MyModel . objects . filter ( is_new = True ) return render_to_response ( template_name , { ' m_list ' : m_list }) \u4f2a\u9020\u6355\u6349\u5230\u7684URLconf\u503c urlpatterns = patterns ( '' , ( r '&#94;mydata/birthday/$' , views.my_view , { 'month' : 'jan' , 'day' : '06' }), ( r '&#94;mydata/(?P<month>\\w{3})/(?P<day>\\d\\d)/$' , views.my_view ), ) \u521b\u5efa\u4e00\u4e2a\u901a\u7528\u89c6\u56fe \u62bd\u53d6\u51fa\u6211\u4eec\u4ee3\u7801\u4e2d\u5171\u6027\u7684\u4e1c\u897f\u662f\u4e00\u4e2a\u5f88\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\u3002 \u4f7f\u7528\u7f3a\u7701\u89c6\u56fe\u53c2\u6570 # urls.py from django.conf.urls.defaults import * from mysite import views urlpatterns = patterns ( '' , ( r '&#94;blog/$' , views.page ), ( r '&#94;blog/page(?P<num>\\d+)/$' , views.page ), ) # views.py def page ( request , num = '1' ): # Output the appropriate page of blog entries , according to num. # ... \uff08\u6ce8\uff1a\u6211\u4eec\u5df2\u7ecf\u6ce8\u610f\u5230\u8bbe\u7f6e\u9ed8\u8ba4\u53c2\u6570\u503c\u662f\u5b57\u7b26\u4e32 \u20181' \uff0c\u4e0d\u662f\u6574\u6570 1 \u3002\u4e3a\u4e86\u4fdd\u6301\u4e00\u81f4\uff0c\u56e0\u4e3a\u6355\u6349\u7ed9 num \u7684\u503c\u603b\u662f\u5b57\u7b26\u4e32\u3002) \u7279\u6b8a\u60c5\u51b5\u4e0b\u7684\u89c6\u56fe \u5229\u7528URLconf\u4ece\u9876\u5411\u4e0b\u7684\u89e3\u6790\u987a\u5e8f\u8fd9\u4e2a\u7279\u70b9\uff1a urlpatterns = patterns ( '' , # ... ( ' &#94; auth / user / add / $' , views . user_add_stage ), ( ' &#94; ([ &#94;/ ] + ) / ([ &#94;/ ] + ) / add / $' , views . add_stage ), # ... ) \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8c61 /auth/user/add/ \u7684\u8bf7\u6c42\u5c06\u4f1a\u88ab user_add_stage \u89c6\u56fe\u5904\u7406\u3002 \u5c3d\u7ba1URL\u4e5f\u5339\u914d\u7b2c\u4e8c\u79cd\u6a21\u5f0f\uff0c\u5b83\u4f1a\u5148\u5339\u914d\u4e0a\u9762\u7684\u6a21\u5f0f\u3002 \uff08\u8fd9\u662f\u77ed\u8def\u903b\u8f91\u3002\uff09 \u4eceURL\u4e2d\u6355\u83b7\u6587\u672c URL \u4f20\u9012\u7ed9views\u7684\u90fd\u662f\u5b57\u7b26\u4e32\u503c\uff01\u5728views\u91cc\u9762\u5904\u7406\u65f6\u8981\u6ce8\u610f\u3002 \u5305\u88c5\u89c6\u56fe\u51fd\u6570 \u5904\u7406\u91cd\u590d\u4ee3\u7801 \u5305\u542b\u5176\u4ed6URLconf \u53c2\u8003\uff1a http://djangobook.py3k.cn/2.0/chapter08/","tags":"django","loc":"http://lotaku.github.io/djangogao-ji-shi-tu-he-urlpei-zhi.html","title":"Django\u9ad8\u7ea7\u89c6\u56fe\u548cURL\u914d\u7f6e"},{"text":"\u5173\u95edhtml\u81ea\u52a8\u8f6c\u610f 1.\u5bf9\u4e8e\u5355\u72ec\u7684\u53d8\u91cf \u7528safe\u8fc7\u6ee4\u5668\u4e3a\u5355\u72ec\u7684\u53d8\u91cf\u5173\u95ed\u81ea\u52a8\u8f6c\u610f\uff1a This will be escaped : {{ data }} This will not be escaped : {{ data | safe }} \u5bf9\u4e8e\u6a21\u677f\u5757 \u4e3a\u4e86\u63a7\u5236\u6a21\u677f\u7684\u81ea\u52a8\u8f6c\u610f,\u7528\u6807\u7b7eautoescape\u6765\u5305\u88c5\u6574\u4e2a\u6a21\u677f(\u6216\u8005\u6a21\u677f\u4e2d\u5e38\u7528\u7684\u90e8\u5206),\u5c31\u50cf\u8fd9\u6837\uff1a { % autoescape off % } Hello {{ name }} { % endautoescape % } autoescape \u6807\u7b7e\u6709\u4e24\u4e2a\u53c2\u6570on\u548coff \u6709\u65f6,\u4f60\u53ef\u80fd\u60f3\u963b\u6b62\u4e00\u90e8\u5206\u81ea\u52a8\u8f6c\u610f,\u5bf9\u53e6\u4e00\u90e8\u5206\u81ea\u52a8\u8f6c\u610f\u3002 \u8fd9\u662f\u4e00\u4e2a\u6a21\u677f\u7684\u4f8b\u5b50\uff1a1 Auto - escaping is on by default . Hello {{ name }} { % autoescape off % } This will not be auto - escaped : {{ data }}. Nor this : {{ other_data }} { % autoescape on % } Auto - escaping applies again : {{ name }} { % endautoescape % } { % endautoescape % } auto-escaping \u6807\u7b7e\u7684\u4f5c\u7528\u57df\u4e0d\u4ec5\u53ef\u4ee5\u5f71\u54cd\u5230\u5f53\u524d\u6a21\u677f\u8fd8\u53ef\u4ee5\u901a\u8fc7include\u6807\u7b7e\u4f5c\u7528\u5230\u5176\u4ed6\u6807\u7b7e,\u5c31\u50cfblock\u6807\u7b7e\u4e00\u6837\u3002 \u4f8b\u5982\uff1a # base.html {% autoescape off %} <h1> {% block title %}{% endblock %} </h1> {% block content %} {% endblock %} {% endautoescape %} # child.html {% extends \"base.html\" %} {% block title %} This & that {% endblock %} {% block content %}{{ greeting }}{% endblock %} \u7531\u4e8e\u5728base\u6a21\u677f\u4e2d\u81ea\u52a8\u8f6c\u610f\u88ab\u5173\u95ed,\u6240\u4ee5\u5728child\u6a21\u677f\u4e2d\u81ea\u52a8\u8f6c\u610f\u4e5f\u4f1a\u5173\u95ed.\u56e0\u6b64,\u5728\u4e0b\u9762\u4e00\u6bb5HTML\u88ab\u63d0\u4ea4\u65f6,\u53d8\u91cfgreeting\u7684\u503c\u5c31\u4e3a\u5b57\u7b26\u4e32Hello! \u81ea\u5b9a\u4e49\u6a21\u677f\u8fc7\u6ee4\u5668 \u81ea\u5b9a\u4e49\u8fc7\u6ee4\u5668\u5c31\u662f\u6709\u4e00\u4e2a\u6216\u4e24\u4e2a\u53c2\u6570\u7684Python\u51fd\u6570: (\u8f93\u5165)\u53d8\u91cf\u7684\u503c \u53c2\u6570\u7684\u503c\uff0c \u53ef\u4ee5\u662f\u9ed8\u8ba4\u503c\u6216\u8005\u5b8c\u5168\u7559\u7a7a \u4f8b\u5982\uff0c\u5728\u8fc7\u6ee4\u5668 {{ var|foo:\"bar\" }} \u4e2d \uff0c\u8fc7\u6ee4\u5668 foo \u4f1a\u88ab\u4f20\u5165\u53d8\u91cf var \u548c\u9ed8\u8ba4\u53c2\u6570 bar\u30022 \u8fc7\u6ee4\u5668\u51fd\u6570\u5e94\u8be5\u603b\u6709\u8fd4\u56de\u503c\u3002 \u800c\u4e14\u4e0d\u80fd\u89e6\u53d1\u5f02\u5e38\uff0c\u5b83\u4eec\u90fd\u5e94\u8be5\u9759\u9759\u5730\u5931\u8d25\u3002 \u5982\u679c\u51fa\u73b0\u9519\u8bef\uff0c\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a\u539f\u59cb\u8f93\u5165\u6216\u8005\u7a7a\u5b57\u7b26\u4e32\uff0c\u8fd9\u4f1a\u66f4\u6709\u610f\u4e49\u3002 \u8fd9\u91cc\u662f\u4e00\u4e9b\u5b9a\u4e49\u8fc7\u6ee4\u5668\u7684\u4f8b\u5b50\uff1a def cut ( value , arg ) : \"Removes all values of arg from the given string\" return value . replace ( arg , '' ) \u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u4ee5\u7528\u6765\u53bb\u6389\u53d8\u91cf\u503c\u7a7a\u683c\u7684\u8fc7\u6ee4\u5668\u4f8b\u5b50\uff1a {{ somevariable | cut : \" \" }} \u5927\u591a\u6570\u8fc7\u6ee4\u5668\u5e76\u4e0d\u9700\u8981\u53c2\u6570\u3002 \u4e0b\u9762\u7684\u4f8b\u5b50\u628a\u53c2\u6570\u4ece\u4f60\u7684\u51fd\u6570\u4e2d\u62ff\u6389\u4e86\uff1a def lower ( value ) : # Only one argument . \"Converts a string into all lowercase\" return value . lower () \u5f53\u4f60\u5b9a\u4e49\u5b8c\u8fc7\u6ee4\u5668\u540e\uff0c\u4f60\u9700\u8981\u7528 Library \u5b9e\u4f8b\u6765\u6ce8\u518c\u5b83\uff0c\u8fd9\u6837\u5c31\u80fd\u901a\u8fc7Django\u7684\u6a21\u677f\u8bed\u8a00\u6765\u4f7f\u7528\u4e86\uff1a2 register . filter ( ' cut ' , cut ) register . filter ( ' lower ' , lower ) Library.filter() \u65b9\u6cd5\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a \u8fc7\u6ee4\u5668\u7684\u540d\u79f0\uff08\u4e00\u4e2a\u5b57\u4e32\uff09 \u8fc7\u6ee4\u5668\u51fd\u6570\u672c\u8eab \u5982\u679c\u4f60\u4f7f\u7528\u7684\u662fPython 2.4\u6216\u8005\u66f4\u65b0\u7684\u7248\u672c\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668register.filter()\uff1a @ register . filter ( name = ' cut ' ) def cut ( value , arg ) : return value . replace ( arg , '' ) @ register . filter def lower ( value ) : return value . lower () \u5982\u679c\u4f60\u60f3\u7b2c\u4e8c\u4e2a\u4f8b\u5b50\u90a3\u6837\u4e0d\u4f7f\u7528 name \u53c2\u6570\uff0c\u90a3\u4e48Django\u4f1a\u628a\u51fd\u6570\u540d\u5f53\u4f5c\u8fc7\u6ee4\u5668\u7684\u540d\u5b57\u3002 \u7b80\u5355\u6807\u7b7e\u7684\u5feb\u6377\u65b9\u5f0f \u6211\u4eec\u4e4b\u524d\u7684\u7684 current_time \u51fd\u6570\u4e8e\u662f\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a def current_time ( format_string ) : try: return datetime . datetime . now (). strftime ( str ( format_string )) except UnicodeEncodeError : return '' register . simple_tag ( current_time ) \u5728 Python 2.4 \u4e2d\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u88c5\u9970\u5668\u8bed\u6cd5\uff1a @ register . simple_tag def current_time ( token ) : # ...","tags":"django","loc":"http://lotaku.github.io/djangomo-ban-gao-ji-jin-jie.html","title":"Django\u6a21\u677f\u9ad8\u7ea7\u8fdb\u9636"},{"text":"\u67e5\u770bCPU\u6e29\u5ea6: sensors \u67e5\u770b\u53608000\u7aef\u53e3\u7684\u7a0b\u5e8f\uff1a lsof -i:8000","tags":"linux","loc":"http://lotaku.github.io/linuxchang-yong-ming-ling.html","title":"Linux\u5e38\u7528\u547d\u4ee4"},{"text":"\u5176\u4ed6\u8bed\u8a00 \u4ec5\u9700\u6dfb\u52a0 django.middleware.locale.LocaleMiddleware \u5230 MIDDLEWARE_CLASSES \u8bbe\u7f6e\u4e2d\uff0c\u5e76\u786e\u4fdd\u5b83\u5728 django.contrib.sessions.middleware.SessionMiddleware \u4e4b\u540e \u81ea\u5b9a\u4e49\u5b57\u6bb5\u6807\u7b7e \u5c06Author.email\u7684\u6807\u7b7e\u6539\u4e3ae-mail\uff0c\u4e2d\u95f4\u6709\u4e2a\u6a2a\u7ebf\u3002 class Author ( models . Model ) : first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 40 ) email = models . EmailField ( blank = True , verbose_name = ' e - mail ' ) \u7b80\u6d01\u8bed\u6cd5,\u4f60\u53ef\u4ee5\u628a\u5b83\u5f53\u4f5c\u56fa\u5b9a\u4f4d\u7f6e\u7684\u53c2\u6570\u4f20\u9012\u3002 \u8fd9\u4e2a\u4f8b\u5b50\u4e0e\u4e0a\u9762\u90a3\u4e2a\u7684\u6548\u679c\u76f8\u540c\u3002 class Author(models.Model): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=40) email = models.EmailField('e-mail', blank=True) \u4f46\u8fd9\u4e0d\u9002\u7528\u4e8eManyToManyField \u548cForeignKey\u5b57\u6bb5\uff0c\u56e0\u4e3a\u5b83\u4eec\u7b2c\u4e00\u4e2a\u53c2\u6570\u5fc5\u987b\u662f\u6a21\u5757\u7c7b\u3002 \u90a3\u79cd\u60c5\u5f62\uff0c\u5fc5\u987b\u663e\u5f0f\u4f7f\u7528verbose_name\u8fd9\u4e2a\u53c2\u6570\u540d\u79f0\u3002 \u81ea\u5b9a\u4e49\u5217\u8868 \u6bd4\u5982\u8bf4\uff1a\u5728\u8fd9\u4e2a\u5217\u8868\u4e2d\u53ef\u4ee5\u770b\u5230\u4f5c\u8005\u7684\u90ae\u7bb1\u5730\u5740\u3002\u5982\u679c\u80fd\u6309\u7167\u59d3\u6c0f\u6216\u540d\u5b57\u6765\u6392\u5e8f\uff0c\u90a3\u5c31\u66f4\u597d\u4e86\u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e2a\u76ee\u7684\uff0c\u6211\u4eec\u5c06\u4e3aAuthor\u6a21\u5757\u5b9a\u4e49\u4e00\u4e2aModelAdmin\u7c7b\u3002 \u8fd9\u4e2a\u7c7b\u662f\u81ea\u5b9a\u4e49\u7ba1\u7406\u5de5\u5177\u7684\u5173\u952e\uff0c\u5176\u4e2d\u6700\u57fa\u672c\u7684\u4e00\u4ef6\u4e8b\u60c5\u662f\u5141\u8bb8\u4f60\u6307\u5b9a\u5217\u8868\u4e2d\u7684\u5b57\u6bb5\u3002 \u6253\u5f00admin.py\u5e76\u4fee\u6539\uff1a from django . contrib import admin from mysite . books . models import Publisher , Author , Book class AuthorAdmin ( admin . ModelAdmin ) : list_display = ( ' first_name ' , ' last_name ' , ' email ' ) admin . site . register ( Publisher ) admin . site . register ( Author , AuthorAdmin ) admin . site . register ( Book ) \u89e3\u91ca\u4e00\u4e0b\u4ee3\u7801\uff1a \u6211\u4eec\u65b0\u5efa\u4e86\u4e00\u4e2a\u7c7bAuthorAdmin\uff0c\u5b83\u662f\u4ecedjango.contrib.admin.ModelAdmin\u6d3e\u751f\u51fa\u6765\u7684\u5b50\u7c7b\uff0c\u4fdd\u5b58\u7740\u4e00\u4e2a\u7c7b\u7684\u81ea\u5b9a\u4e49\u914d\u7f6e\uff0c\u4ee5\u4f9b\u7ba1\u7406\u5de5\u5177\u4f7f\u7528\u3002 \u6211\u4eec\u53ea\u81ea\u5b9a\u4e49\u4e86\u4e00\u9879\uff1alist_display\uff0c \u5b83\u662f\u4e00\u4e2a\u5b57\u6bb5\u540d\u79f0\u7684\u5143\u7ec4\uff0c\u7528\u4e8e\u5217\u8868\u663e\u793a\u3002 \u5f53\u7136\uff0c\u8fd9\u4e9b\u5b57\u6bb5\u540d\u79f0\u5fc5\u987b\u662f\u6a21\u5757\u4e2d\u6709\u7684\u30023 \u6211\u4eec\u4fee\u6539\u4e86admin.site.register()\u8c03\u7528\uff0c\u5728Author\u540e\u9762\u6dfb\u52a0\u4e86AuthorAdmin\u3002\u4f60\u53ef\u4ee5\u8fd9\u6837\u7406\u89e3\uff1a \u7528AuthorAdmin\u9009\u9879\u6ce8\u518cAuthor\u6a21\u5757\u3002 admin.site.register()\u51fd\u6570\u63a5\u53d7\u4e00\u4e2aModelAdmin\u5b50\u7c7b\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002 \u5982\u679c\u4f60\u5ffd\u7565\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0cDjango\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u9009\u9879\u3002Publisher\u548cBook\u7684\u6ce8\u518c\u5c31\u5c5e\u4e8e\u8fd9\u79cd\u60c5\u51b5\u3002 \u6dfb\u52a0\u4e00\u4e2a\u5feb\u901f\u67e5\u8be2\u680f\u3002 \u5411AuthorAdmin\u8ffd\u52a0search_fields\uff0c\u5982\uff1a class AuthorAdmin ( admin . ModelAdmin ) : list_display = ( ' first_name ' , ' last_name ' , ' email ' ) search_fields = ( ' first_name ' , ' last_name ' ) \u5237\u65b0\u6d4f\u89c8\u5668\uff0c\u4f60\u4f1a\u5728\u9875\u9762\u9876\u7aef\u770b\u5230\u4e00\u4e2a\u67e5\u8be2\u680f\u3002 \uff08\u89c1\u56fe6-9.\uff09\u6211\u4eec\u521a\u624d\u6240\u4f5c\u7684\u4fee\u6539\u5217\u8868\u9875\u9762\uff0c\u6dfb\u52a0\u4e86\u4e00\u4e2a\u6839\u636e\u59d3\u540d\u67e5\u8be2\u7684\u67e5\u8be2\u6846\u3002 \u6b63\u5982\u7528\u6237\u6240\u5e0c\u671b\u7684\u90a3\u6837\uff0c\u5b83\u662f\u5927\u5c0f\u5199\u654f\u611f\uff0c\u5e76\u4e14\u5bf9\u4e24\u4e2a\u5b57\u6bb5\u68c0\u7d22\u7684\u67e5\u8be2\u6846\u3002\u5982\u679c\u67e5\u8be2\"bar\"\uff0c\u90a3\u4e48\u540d\u5b57\u4e2d\u542b\u6709Barney\u548c\u59d3\u6c0f\u4e2d\u542b\u6709Hobarson\u7684\u4f5c\u8005\u8bb0\u5f55\u5c06\u88ab\u68c0\u7d22\u51fa\u6765\u3002 \u6dfb\u52a0\u4e00\u4e9b\u8fc7\u6ee4\u5668 class BookAdmin ( admin . ModelAdmin ) : list_display = ( ' title ' , ' publisher ' , ' publication_date ' ) list_filter = ( ' publication_date ' ,) date_hierarchy = ' publication_date \u6539\u53d8\u9ed8\u8ba4\u7684\u6392\u5e8f\u65b9\u5f0f ordering = ( ' - publication_date ' ,) \u81ea\u5b9a\u4e49\u7f16\u8f91\u8868\u5355 \u9996\u5148\uff0c\u6211\u4eec\u5148\u81ea\u5b9a\u4e49\u5b57\u6bb5\u987a\u5e8f\u3002 \u9ed8\u8ba4\u5730\uff0c\u8868\u5355\u4e2d\u7684\u5b57\u6bb5\u987a\u5e8f\u662f\u4e0e\u6a21\u5757\u4e2d\u5b9a\u4e49\u662f\u4e00\u81f4\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528ModelAdmin\u5b50\u7c7b\u4e2d\u7684fields\u9009\u9879\u6765\u6539\u53d8\u5b83\uff1a class BookAdmin ( admin . ModelAdmin ) : list_display = ( ' title ' , ' publisher ' , ' publication_date ' ) list_filter = ( ' publication_date ' ,) date_hierarchy = ' publication_date ' ordering = ( ' - publication_date ' ,) ** fields = ( ' title ' , ' authors ' , ' publisher ' , ' publication_date ' ) ** \u901a\u8fc7fields\u8fd9\u4e2a\u9009\u9879\uff0c\u4f60\u53ef\u4ee5\u6392\u9664\u4e00\u4e9b\u4e0d\u60f3\u88ab\u5176\u4ed6\u4eba\u7f16\u8f91\u7684fields \u53ea\u8981\u4e0d\u9009\u4e0a\u4e0d\u60f3\u88ab\u7f16\u8f91\u7684field(s)\u5373\u53ef\u3002 \u5f53\u4f60\u7684admi\u7528\u6237\u53ea\u662f\u88ab\u4fe1\u4efb\u53ef\u4ee5\u66f4\u6539\u4f60\u7684\u67d0\u4e00\u90e8\u5206\u6570\u636e\u65f6\uff0c\u6216\u8005\uff0c\u4f60\u7684\u6570\u636e\u88ab\u4e00\u4e9b\u5916\u90e8\u7684\u7a0b\u5e8f\u81ea\u52a8\u5904\u7406\u800c\u6539\u53d8\u4e86\u4e86\uff0c\u4f60\u5c31\u53ef\u4ee5\u7528\u8fd9\u4e2a\u529f\u80fd\u3002 \u4f8b\u5982\uff0c\u5728book\u6570\u636e\u5e93\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u9690\u85cfpublication_date\uff0c\u4ee5\u9632\u6b62\u5b83\u88ab\u7f16\u8f91\u3002 \u9488\u5bf9\u591a\u9009\u5b57\u6bb5 \u4f7f\u7528filter_horizontal \u6216\u8005 filter_vertical \u3002\u8ba9\u6211\u4eec\u628a\u5b83\u6dfb\u52a0\u5230BookAdmin\u4e2d\uff0c\u7136\u540e\u770b\u770b\u5b83\u7684\u6548\u679c\u3002 class BookAdmin ( admin . ModelAdmin ) : list_display = ( ' title ' , ' publisher ' , ' publication_date ' ) list_filter = ( ' publication_date ' ,) date_hierarchy = ' publication_date ' ordering = ( ' - publication_date ' ,) ** filter_horizontal = ( ' authors ' ,) ** \u5237\u65b0book\u7f16\u8f91\u9875\u9762\uff0c\u4f60\u4f1a\u770b\u5230Author\u533a\u4e2d\u6709\u4e00\u4e2a\u7cbe\u5de7\u7684JavaScript\u8fc7\u6ee4\u5668\uff0c\u5b83\u5141\u8bb8\u4f60\u68c0\u7d22\u9009\u9879\uff0c\u7136\u540e\u5c06\u9009\u4e2d\u7684authors\u4eceAvailable\u6846\u79fb\u5230Chosen\u6846\uff0c\u8fd8\u53ef\u4ee5\u79fb\u56de\u6765\u3002 \u88c5\u8f7d\u8fc7\u591a\u7684\u9009\u9879\uff0c\u4e3a\u51cf\u5c11\u6d88\u8017\uff0c\u4f7f\u7528\uff1a raw_id_fields class BookAdmin ( admin . ModelAdmin ) : list_display = ( ' title ' , ' publisher ' , ' publication_date ' ) list_filter = ( ' publication_date ' ,) date_hierarchy = ' publication_date ' ordering = ( ' - publication_date ' ,) filter_horizontal = ( ' authors ' ,) ** raw_id_fields = ( ' publisher ' ,) **","tags":"django","loc":"http://lotaku.github.io/django-admin.html","title":"Django-Admin"},{"text":"\u9a8c\u8bc1\u6a21\u578b\u7684\u6709\u6548\u6027 python manage.py validate \u6a21\u578b\u786e\u8ba4\u6ca1\u95ee\u9898\u4e86\uff0c\u8fd0\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u6765\u751f\u6210 CREATE TABLE \u8bed\u53e5 python manage.py sqlall books sqlall \u547d\u4ee4\u5e76\u6ca1\u6709\u5728\u6570\u636e\u5e93\u4e2d\u771f\u6b63\u521b\u5efa\u6570\u636e\u8868\uff0c\u53ea\u662f\u628aSQL\u8bed\u53e5\u6bb5\u6253\u5370\u51fa\u6765\uff0c\u8fd9\u6837\u4f60\u53ef\u4ee5\u770b\u5230Django\u7a76\u7adf\u4f1a\u505a\u4e9b\u4ec0\u4e48\u3002 \u63d0\u4ea4SQL\u8bed\u53e5\u81f3\u6570\u636e\u5e93\u7684\u65b9\u6cd5 python manage.py syncdb \u4f7f\u7528Django modle API\u521b\u5efa\u5bf9\u8c61\u65f6Django\u5e76\u672a\u5c06\u5bf9\u8c61\u4fdd\u5b58\u81f3\u6570\u636e\u5e93\u5185\uff0c\u9664\u975e\u4f60\u8c03\u7528 save() \u65b9\u6cd5 p1 = Publisher (...) # At this point, p1 is not saved to the database yet! p1 . save () # Now it is. \u6dfb\u52a0\u6a21\u5757\u7684\u5b57\u7b26\u4e32\u8868\u73b0 \u5f53\u6211\u4eec\u6253\u5370\u6574\u4e2apublisher\u5217\u8868\u65f6\uff0c\u6211\u4eec\u6ca1\u6709\u5f97\u5230\u60f3\u8981\u7684\u6709\u7528\u4fe1\u606f\uff0c\u65e0\u6cd5\u628a````\u5bf9\u8c61\u533a\u5206\u5f00\u6765\u3002\u6211\u4eec\u53ef\u4ee5\u7b80\u5355\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u9700\u8981\u4e3aPublisher \u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u65b9\u6cd5 unicode () \u3002 unicode () \u65b9\u6cd5\u544a\u8bc9Python\u5982\u4f55\u5c06\u5bf9\u8c61\u4ee5unicode\u7684\u65b9\u5f0f\u663e\u793a\u51fa\u6765\u3002 \u4e3a\u4ee5\u4e0a\u4e09\u4e2a\u6a21\u578b\u6dfb\u52a0__unicode__()\u65b9\u6cd5\u540e\uff0c\u5c31\u53ef\u4ee5\u770b\u5230\u6548\u679c\u4e86\uff1a from django . db import models class Publisher ( models . Model ) : name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) state_province = models . CharField ( max_length = 30 ) country = models . CharField ( max_length = 50 ) website = models . URLField () ** def __unicode__ ( self ) :** ** return self . name ** \u5b57\u6bb5\u5e38\u7528\u53c2\u6570 \u5b57\u6bb5\u5141\u8bb8\u4e3a\u7a7a,eg\uff1a website = models.URLField(blank=True) \u65e5\u671f\u578b\u5b57\u6bb5\u7559\u7a7a \u5982\u679c\u4f60\u60f3\u5141\u8bb8\u4e00\u4e2a\u65e5\u671f\u578b\uff08DateField\u3001TimeField\u3001DateTimeField\uff09\u6216\u6570\u5b57\u578b\uff08IntegerField\u3001DecimalField\u3001FloatField\uff09\u5b57\u6bb5\u4e3a\u7a7a\uff0c\u4f60\u9700\u8981\u4f7f\u7528null=True * \u548c* blank=True\u3002 \u4e3a\u4e86\u4e3e\u4f8b\u8bf4\u660e\uff0c\u8ba9\u6211\u4eec\u628aBook\u6a21\u5757\u4fee\u6539\u6210\u5141\u8bb8 publication_date\u4e3a\u7a7a\u3002\u4fee\u6539\u540e\u7684\u4ee3\u7801\u5982\u4e0b\uff1a class Book ( models . Model ) : title = models . CharField ( max_length = 100 ) authors = models . ManyToManyField ( Author ) publisher = models . ForeignKey ( Publisher ) publication_date = models . DateField ( ** blank = True , null = True ** ) \u63d2\u5165\u548c\u66f4\u65b0\u6570\u636e \u4f60\u5df2\u7ecf\u77e5\u9053\u600e\u4e48\u505a\u4e86\uff1a \u5148\u4f7f\u7528\u4e00\u4e9b\u5173\u952e\u53c2\u6570\u521b\u5efa\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u5982\u4e0b\uff1a >>> p = Publisher ( name = ' Apress ' , ... address = ' 2855 Telegraph Ave . ' , ... city = ' Berkeley ' , ... state_province = ' CA ' , ... country = ' U . S . A . ' , ... website = ' http : //www.apress.com/') \u8fd9\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u5e76 \u6ca1\u6709 \u5bf9\u6570\u636e\u5e93\u505a\u4fee\u6539\u3002 \u5728\u8c03\u7528 save() \u65b9\u6cd5\u4e4b\u524d\uff0c\u8bb0\u5f55\u5e76\u6ca1\u6709\u4fdd\u5b58\u81f3\u6570\u636e\u5e93\uff0c\u50cf\u8fd9\u6837\uff1a >>> p.save() \u63a5\u4e0b\u6765\u518d\u8c03\u7528 save() \u5c06\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u8bb0\u5f55\uff0c\u800c\u53ea\u662f\u4fee\u6539\u8bb0\u5f55\u5185\u5bb9\uff08\u4e5f\u5c31\u662f \u6267\u884c UPDATE SQL\u8bed\u53e5\uff0c\u800c\u4e0d\u662f INSERT \u8bed\u53e5\uff09\uff1a >>> p . name = ' Apress Publishing ' >>> p . save () \u9009\u62e9\u5bf9\u8c61 \u4ece\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6a21\u578b\u4e2d\u53d6\u51fa\u6240\u6709\u8bb0\u5f55 >>> Publisher . objects . all () [ < Publisher : Apress > , < Publisher : O ' Reilly > ] \u6570\u636e\u8fc7\u6ee4 \u5728Django API\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 filter() \u65b9\u6cd5\u5bf9\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\uff1a >>> Publisher . objects . filter ( name = ' Apress ' ) [ < Publisher : Apress > ] \u5176\u4ed6\u7c7b\u578b\u7684\u67e5\u627e\u4e5f\u53ef\u4ee5\u4f7f\u7528\uff1a >>> Publisher . objects . filter ( name__contains = \"press\" ) [ < Publisher : Apress > ] \u5728 name \u548c contains \u4e4b\u95f4\u6709\u53cc\u4e0b\u5212\u7ebf\u3002\u548cPython\u4e00\u6837\uff0cDjango\u4e5f\u4f7f\u7528\u53cc\u4e0b\u5212\u7ebf\u6765\u8868\u660e\u4f1a\u8fdb\u884c\u4e00\u4e9b\u9b54\u672f\u822c\u7684\u64cd\u4f5c\u3002\u8fd9\u91cc\uff0ccontains\u90e8\u5206\u4f1a\u88abDjango\u7ffb\u8bd1\u6210LIKE\u8bed\u53e5\uff1a SELECT id , name , address , city , state_province , country , website FROM books_publisher WHERE name LIKE ' % press % ' ; \u83b7\u53d6\u5355\u4e2a\u5bf9\u8c61 \u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d filter() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8bb0\u5f55\u96c6\uff0c\u8fd9\u4e2a\u8bb0\u5f55\u96c6\u662f\u4e00\u4e2a\u5217\u8868\u3002 \u76f8\u5bf9\u5217\u8868\u6765\u8bf4\uff0c\u6709\u4e9b\u65f6\u5019\u6211\u4eec\u66f4\u9700\u8981\u83b7\u53d6\u5355\u4e2a\u7684\u5bf9\u8c61\uff0c get() \u65b9\u6cd5\u5c31\u662f\u5728\u6b64\u65f6\u4f7f\u7528\u7684\uff1a >>> Publisher . objects . get ( name = \"Apress\" ) < Publisher : Apress > \u8fd9\u6837\uff0c\u5c31\u8fd4\u56de\u4e86\u5355\u4e2a\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u5217\u8868\uff08\u66f4\u51c6\u786e\u7684\u8bf4\uff0cQuerySet)\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u7ed3\u679c\u662f\u591a\u4e2a\u5bf9\u8c61\uff0c\u4f1a\u5bfc\u81f4\u629b\u51fa\u5f02\u5e38\uff1a >>> Publisher . objects . get ( country = \"U.S.A.\" ) Traceback ( most recent call last ) : ... MultipleObjectsReturned: get () returned more than one Publisher -- it returned 2 ! Lookup parameters were { ' country ' : ' U . S . A . ' } \u5982\u679c\u67e5\u8be2\u6ca1\u6709\u8fd4\u56de\u7ed3\u679c\u4e5f\u4f1a\u629b\u51fa\u5f02\u5e38\uff1a >>> Publisher . objects . get ( name = \"Penguin\" ) Traceback ( most recent call last ) : ... DoesNotExist: Publisher matching query does not exist . \u8fd9\u4e2a DoesNotExist \u5f02\u5e38 \u662f Publisher \u8fd9\u4e2a model \u7c7b\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5373 Publisher.DoesNotExist\u3002\u5728\u4f60\u7684\u5e94\u7528\u4e2d\uff0c\u4f60\u53ef\u4ee5\u6355\u83b7\u5e76\u5904\u7406\u8fd9\u4e2a\u5f02\u5e38\uff0c\u50cf\u8fd9\u6837\uff1a try : p = Publisher . objects . get ( name = 'Apress' ) except Publisher . DoesNotExist : print \"Apress isn't in the database yet.\" else : print \"Apress is in the database.\" \u6570\u636e\u6392\u5e8f order_by() >>> Publisher . objects . order_by ( \"name\" ) [ < Publisher : Apress > , < Publisher : O ' Reilly > ] \u5982\u679c\u9700\u8981\u4ee5\u591a\u4e2a\u5b57\u6bb5\u4e3a\u6807\u51c6\u8fdb\u884c\u6392\u5e8f\uff08\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u4f1a\u5728\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u7684\u503c\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u88ab\u4f7f\u7528\u5230\uff09\uff0c\u4f7f\u7528\u591a\u4e2a\u53c2\u6570\u5c31\u53ef\u4ee5\u4e86\uff0c\u5982\u4e0b\uff1a >>> Publisher . objects . order_by ( \"state_province\" , \"address\" ) [ < Publisher : Apress > , < Publisher : O ' Reilly > ] \u6211\u4eec\u8fd8\u53ef\u4ee5\u6307\u5b9a\u9006\u5411\u6392\u5e8f\uff0c\u5728\u524d\u9762\u52a0\u4e00\u4e2a\u51cf\u53f7 - \u524d\u7f00\uff1a >>> Publisher . objects . order_by ( \"-name\" ) [ < Publisher : O ' Reilly > , < Publisher : Apress > ] \u5c3d\u7ba1\u5f88\u7075\u6d3b\uff0c\u4f46\u662f\u6bcf\u6b21\u90fd\u8981\u7528 order_by() \u663e\u5f97\u6709\u70b9\u5570\u55e6\u3002 \u5927\u591a\u6570\u65f6\u95f4\u4f60\u901a\u5e38\u53ea\u4f1a\u5bf9\u67d0\u4e9b \u5b57\u6bb5\u8fdb\u884c\u6392\u5e8f\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cDjango\u8ba9\u4f60\u53ef\u4ee5\u6307\u5b9a\u6a21\u578b\u7684\u7f3a\u7701\u6392\u5e8f\u65b9\u5f0f\uff1a class Publisher ( models . Model ) : name = models . CharField ( max_length = 30 ) address = models . CharField ( max_length = 50 ) city = models . CharField ( max_length = 60 ) state_province = models . CharField ( max_length = 30 ) country = models . CharField ( max_length = 50 ) website = models . URLField () def __unicode__ ( self ) : return self . name ** class Meta :** ** ordering = [ ' name ' ] ** class Meta \uff0c\u5185\u5d4c\u4e8e Publisher \u8fd9\u4e2a\u7c7b\u7684\u5b9a\u4e49\u4e2d\u3002\u4f60\u53ef\u4ee5\u5728\u4efb\u610f\u4e00\u4e2a \u6a21\u578b \u7c7b\u4e2d\u4f7f\u7528 Meta \u7c7b\uff0c\u6765\u8bbe\u7f6e\u4e00\u4e9b\u4e0e\u7279\u5b9a\u6a21\u578b\u76f8\u5173\u7684\u9009\u9879\u3002 \u5982\u679c\u4f60\u8bbe\u7f6e\u4e86\u8fd9\u4e2a\u9009\u9879\uff0c\u90a3\u4e48\u9664\u975e\u4f60\u68c0\u7d22\u65f6\u7279\u610f\u989d\u5916\u5730\u4f7f\u7528\u4e86 order_by()\uff0c\u5426\u5219\uff0c\u5f53\u4f60\u4f7f\u7528 Django \u7684\u6570\u636e\u5e93 API \u53bb\u68c0\u7d22\u65f6\uff0cPublisher\u5bf9\u8c61\u7684\u76f8\u5173\u8fd4\u56de\u503c\u9ed8\u8ba4\u5730\u90fd\u4f1a\u6309 name \u5b57\u6bb5\u6392\u5e8f\u3002 \u8fde\u9501\u67e5\u8be2 \u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u5982\u4f55\u5bf9\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\u548c\u6392\u5e8f\u3002 \u5f53\u7136\uff0c\u901a\u5e38\u6211\u4eec\u9700\u8981\u540c\u65f6\u8fdb\u884c\u8fc7\u6ee4\u548c\u6392\u5e8f\u67e5\u8be2\u7684\u64cd\u4f5c\u3002 \u56e0\u6b64\uff0c\u4f60\u53ef\u4ee5\u7b80\u5355\u5730\u5199\u6210\u8fd9\u79cd\"\u94fe\u5f0f\"\u7684\u5f62\u5f0f\uff1a >>> Publisher . objects . filter ( country = \"U.S.A.\" ). order_by ( \"-name\" ) [ < Publisher : O ' Reilly > , < Publisher : Apress > ] \u9650\u5236\u8fd4\u56de\u7684\u6570\u636e \u53e6\u4e00\u4e2a\u5e38\u7528\u7684\u9700\u6c42\u5c31\u662f\u53d6\u51fa\u56fa\u5b9a\u6570\u76ee\u7684\u8bb0\u5f55\u3002 \u60f3\u8c61\u4e00\u4e0b\u4f60\u6709\u6210\u5343\u4e0a\u4e07\u7684\u51fa\u7248\u5546\u5728\u4f60\u7684\u6570\u636e\u5e93\u91cc\uff0c \u4f46\u662f\u4f60\u53ea\u60f3\u663e\u793a\u7b2c\u4e00\u4e2a\u3002 \u4f60\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684Python\u5217\u8868\u88c1\u526a\u8bed\u53e5\uff1a6 >>> Publisher . objects . order_by ( ' name ' )[ 0 ] < Publisher : Apress > \u66f4\u65b0\u591a\u4e2a\u5bf9\u8c61 >>> Publisher . objects . filter ( id = 52 ). update ( name = ' Apress Publishing ' ) \u4e0e\u4e4b\u7b49\u540c\u7684SQL\u8bed\u53e5\u53d8\u5f97\u66f4\u9ad8\u6548\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f15\u8d77\u7ade\u6001\u6761\u4ef6\u3002 UPDATE books_publisher SET name = ' Apress Publishing ' WHERE id = 52 ; update()\u65b9\u6cd5\u5bf9\u4e8e\u4efb\u4f55\u7ed3\u679c\u96c6\uff08QuerySet\uff09\u5747\u6709\u6548\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u540c\u65f6\u66f4\u65b0\u591a\u6761\u8bb0\u5f55\u3002 \u4ee5\u4e0b\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u5c06\u6240\u6709Publisher\u7684country\u5b57\u6bb5\u503c\u7531'U.S.A'\u66f4\u6539\u4e3a'USA'\uff1a11 >>> Publisher . objects . all (). update ( country = ' USA ' ) 2 update()\u65b9\u6cd5\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u6570\u503c\uff0c\u8868\u793a\u53d7\u5f71\u54cd\u7684\u8bb0\u5f55\u6761\u6570\u3002 \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8fd9\u4e2a\u503c\u662f2\u3002 \u5220\u9664\u5bf9\u8c61 \u5220\u9664\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61\u53ea\u9700\u8c03\u7528\u8be5\u5bf9\u8c61\u7684delete()\u65b9\u6cd5\u5373\u53ef\uff1a >>> p = Publisher . objects . get ( name = \"O'Reilly\" ) >>> p . delete () >>> Publisher . objects . all () [ < Publisher : Apress Publishing > ] \u540c\u6837\u6211\u4eec\u53ef\u4ee5\u5728\u7ed3\u679c\u96c6\u4e0a\u8c03\u7528delete()\u65b9\u6cd5\u540c\u65f6\u5220\u9664\u591a\u6761\u8bb0\u5f55\u3002\u8fd9\u4e00\u70b9\u4e0e\u6211\u4eec\u4e0a\u4e00\u5c0f\u8282\u63d0\u5230\u7684update()\u65b9\u6cd5\u76f8\u4f3c\uff1a >>> Publisher . objects . filter ( country = ' USA ' ). delete () >>> Publisher . objects . all (). delete () >>> Publisher . objects . all () [] \u5220\u9664\u6570\u636e\u65f6\u8981\u8c28\u614e\uff01 \u4e3a\u4e86\u9884\u9632\u8bef\u5220\u9664\u6389\u67d0\u4e00\u4e2a\u8868\u5185\u7684\u6240\u6709\u6570\u636e\uff0cDjango\u8981\u6c42\u5728\u5220\u9664\u8868\u5185\u6240\u6709\u6570\u636e\u65f6\u663e\u793a\u4f7f\u7528all()\u3002 \u6bd4\u5982\uff0c\u4e0b\u9762\u7684\u64cd\u4f5c\u5c06\u4f1a\u51fa\u9519\uff1a1 >>> Publisher.objects.delete () Traceback ( most recent call last ): File \"<console>\" , line 1 , in < module > AttributeError : 'Manager' object has no attribute 'delete'","tags":"django","loc":"http://lotaku.github.io/django-mo-xing.html","title":"Django-\u6a21\u578b"},{"text":"\u4ee5\u4e0b\u662f\u5e38\u7528\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/env python # encoding: utf-8 import MySQLdb import _mysql_exceptions import traceback try : conn = MySQLdb . connect ( host = 'localhost' , user = 'root' , passwd = '123qwe' ) except MySQLdb . OperationalError , e : if e [ 0 ] == 1045 : print \"\u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef\" elif e [ 0 ] == 2005 : print \"\u670d\u52a1\u5668host\u5730\u5740\u9519\u8bef\" raise SystemExit print \"\u6570\u636e\u5e93\u94fe\u63a5\u6210\u529f\" cursor = conn . cursor () print \"\u83b7\u5f97\u6570\u636e\u5e93\u6e38\u6807\" database_name = 'hushua' sqlstr_create_database = \"\"\"create database if not exists %s \"\"\" % database_name sqlstr_create_database = \"\"\"create database %s \"\"\" % database_name try : cursor . execute ( sqlstr_create_database ) except MySQLdb . ProgrammingError , e : if e [ 0 ] == 1007 : print \"\u6570\u636e\u5e93:\" + database_name + \"\u5df2\u5b58\u5728\uff0c\u521b\u5efa\u5931\u8d25\" raise SystemExit print \"\u6570\u636e\u5e93: \" + database_name + \" \u521b\u5efa\u6210\u529f\"","tags":"mysql","loc":"http://lotaku.github.io/pythonku-mysqldb.html","title":"python\u5e93-MySQLdb"},{"text":"2013-01-13 1. \"\u5728\u6587\u4ef6\uff1a/etc/apache2/sites-available/default \u9876\u90e8\u52a0\u5165 \uff1aServerName 127.0.0.1\"","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/xi-tong-xiu-gai-ji-lu.html","title":"\u7cfb\u7edf\u4fee\u6539\u8bb0\u5f55"},{"text":"\u5b66\u4e60\u4f53\u4f1a \u968f\u8bb0 \u719f\u80fd\u751f\u5de7\uff0c\u8d77\u7801\u8981\u575a\u6301\u5b66\u4e6027\u5929\uff01\u624d\u80fd\u4e0b\u7ed3\u8bba\u3002 \u5b66\u4e60\u7f16\u7a0b\uff0c\u6570\u5b66\u903b\u8f91\u5f88\u91cd\u8981\uff0c\u8981\u5b89\u6392\u65f6\u95f4\u5b66\u4e60\u3002 \u4efb\u52a1\u5f0f \u4efb\u52a1\u5f0f \u8fdb\u5ea6\u6570\u636e\u5316 \u4e00\u5b9a\u8981\u8bb0\u5f97\uff0c\u81ea\u5df1\u6700\u521d\u7684\u76ee\u7684\uff01","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/xue-xi-ti-hui.html","title":"\u5b66\u4e60\u4f53\u4f1a"},{"text":"VIM \u76f8\u5173 1.\u63d2\u4ef6ultisnips \u4f1a\u5728\u4ee5\u4e0b\u8def\u5f84\u641c\u7d22\u5feb\u6377\u8f93\u5165\uff0c\u6709\u51b2\u7a81\u63d0\u793a \u8def\u5f841\uff1a/usr/share/vim/vim74/bundle/ultisnips/UltiSnips \u8def\u5f842\uff1a/home/l/app/k-vim/bundle/ultisnips/UltiSnips \u6682\u65f6\u89e3\u51b3\u65b9\u6cd5\uff1a \u4fee\u6539\u4e86\"\u8def\u5f841\"\u6700\u540e\u7684\u6587\u4ef6\u5939\u7684\u540d\u5b57 \u76ee\u524d\u76d1\u89c6\u7684\u76ee\u5f55\uff1a /home/l/app/k-vim/snippets /home/l/app/k-vim/bundle/ultisnips/UltiSnips ceshi","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/xue-xi-guo-cheng-zhong-de-wen-ti-ji-lu.html","title":"\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u7684\u95ee\u9898\u8bb0\u5f55"},{"text":"\u5b66\u4e60\u4e2d\uff1a pelican+github \u642d\u5efa\u535a\u5ba2[DONE] + \u5f00\u59cb\u65f6\u95f4\uff1a 2014 - 01 - 13 + \u5b66\u4e60\u8d44\u6e90\uff1a [ \u535a\u5ba2 ] 1. http : //www.linuxzen.com/tag/pelican.html 2. http : //www.yanyulin.info/pages/2013/11/pelican.html 3. http : //lianglin999.cn/posts/setup-pelican.html + \u5b66\u4e60\u8fdb\u5ea6\uff1a [ DONE ] git[DONE] + \u5f00\u59cb\u65f6\u95f4\uff1a 2014 - 01 - 13 + \u5b66\u4e60\u8d44\u6e90\uff1a \u5728\u7ebf\u6559\u7a0b [ \u5ed6\u96ea\u5cf0 - Git \u6559\u7a0b ]( http : //t.cn/zQ6LFwE ) + \u5b66\u4e60\u8fdb\u5ea6\uff1a [ DONE ] markdown[DONE] + \u5f00\u59cb\u65f6\u95f4\uff1a 2014 - 01 - 14 + \u5b66\u4e60\u8d44\u6e90\uff1a \u5728\u7ebf\u6559\u7a0b [ http : //wowubuntu.com/markdown/index.html] + \u5b66\u4e60\u8fdb\u5ea6\uff1a [ DONE ] \u8c37\u6b4c\u6d4f\u89c8\u5668\u63d2\u4ef6 chrome vimium[DONE] + \u5f00\u59cb\u65f6\u95f4\uff1a 2014 - 01 - 14 + \u5b66\u4e60\u8fdb\u5ea6\uff1a [ DONE ] Python:\u300apython\u6807\u51c6\u5e93\u300c\u8377\u66fc\u5c14\u300d\u300b + \u5f00\u59cb\u65f6\u95f4\uff1a 2014 - 01 - 16 + \u5b66\u4e60\u8d44\u6e90\uff1a \u7535\u5b50\u4e66 \u300a Python \u6807\u51c6\u5e93\u300b -- \u8377\u5c14\u66fc ( Doug Hellmann ) ( \u4f5c\u8005 ), \u5218\u70bd ( \u8bd1\u8005 ), \u7b49 ( \u8bd1\u8005 ) 2012 \u5e74 5 \u6708\u7248 + \u5b66\u4e60\u8fdb\u5ea6\uff1a * 2014 - 01 - 16 [ \u5b8c\u6210\u5ea6\uff1a 2.89 % ] * 2014 - 01 - 17 [ \u5b8c\u6210\u5ea6\uff1a 3.66 % ] * 2014 - 01 - 18 [ \u5b8c\u6210\u5ea6\uff1a 5.22 % ] * 2014 - 01 - 19 [ \u5b8c\u6210\u5ea6\uff1a 6.35 % ] * 2014 - 01 - 20 [ \u5b8c\u6210\u5ea6\uff1a 7.61 % ] * 2014 - 01 - 21 [ \u5b8c\u6210\u5ea6\uff1a 8.18 % ] * 2014 - 01 - 22 [ \u5b8c\u6210\u5ea6\uff1a 9.63 % ] * 2014 - 01 - 23 [ \u5b8c\u6210\u5ea6\uff1a 11.65 % ] * [ page_69 2.24 \u538b\u540e\u5b66\u4e60 ] * [ page_70 2.31 \u538b\u540e\u5b66\u4e60 ] * [ page_79 2.54 \u538b\u540e\u5b66\u4e60 ] * [ page_88 2.74 \u538b\u540e\u5b66\u4e60 ] * [ page_92 2.75 \u538b\u540e\u5b66\u4e60 ] * [ page_96 2.83 \u538b\u540e\u5b66\u4e60 ] * [ page_96 2.84 \u538b\u540e\u5b66\u4e60 ] * 2014 - 01 - 24 [ \u5b8c\u6210\u5ea6\uff1a 12.81 % ] * 2014 - 01 - 27 [ \u5b8c\u6210\u5ea6\uff1a 14.83 % ] * [ page_111 3.12 \u538b\u540e\u5b66\u4e60 : \u6a21\u5757\uff08 inspect \uff09\u672a\u5b66 ] VIM:\u300a Practical Vim\u300cDrew Neil\u300d\u300b \u5f00\u59cb\u65f6\u95f4\uff1a 2014-01-19 \u5b66\u4e60\u8d44\u6e90\uff1a \u7535\u5b50\u4e66 \u300a Practical Vim\u300b--\u300cDrew Neil\u300d \u5b66\u4e60\u8fdb\u5ea6\uff1a 2014-01-19 [\u5b8c\u6210\u5ea6\uff1a 9.42%] 2014-01-20 [\u5b8c\u6210\u5ea6\uff1a13.67%] 2014-01-21 [\u5b8c\u6210\u5ea6\uff1a14.89%] 2014-01-22 [\u5b8c\u6210\u5ea6\uff1a17.93%] 2014-01-23 [\u5b8c\u6210\u5ea6\uff1a18.54%] 2014-01-28 [\u5b8c\u6210\u5ea6\uff1a%] [page_49 \u5b9e\u8df5\u6548\u679c\u4e0d\u540c\uff01\uff1f] \u300aUsing English at work\u300b + \u5f00\u59cb\u65f6\u95f4\uff1a 2014 - 01 - 16 + \u5b66\u4e60\u8d44\u6e90\uff1a Podcast \u6750\u6599 -- \u300a Using English at work \u300b + \u5b66\u4e60\u65b9\u6cd5\uff1a \u7531\u6076\u9b54\u7684\u5976\u7238 ( \u8c46\u74e3\u540d\u4eba ) \u63d0\u4f9b + \u5b66\u4e60\u8fdb\u5ea6\uff1a * 2014 - 01 - 17 [ \u5b8c\u6210\u5ea6\uff1a 10 % ] * 2014 - 01 - 20 [ \u5b8c\u6210\u5ea6\uff1a 20 % ] * 2014 - 01 - 22 [ \u5b8c\u6210\u5ea6\uff1a 30 % ] * 2014 - 01 - 23 [ \u5b8c\u6210\u5ea6\uff1a 40 % ] * 2014 - 01 - 24 [ \u5b8c\u6210\u5ea6\uff1a 50 % ] Virtualenv + \u5f00\u59cb\u65f6\u95f4\uff1a 2014 - 02 - 03 + \u5b66\u4e60\u8d44\u6e90\uff1a \u5728\u7ebf\u6559\u7a0b [ https : //docs.djangoproject.com/en/1.5/] + \u5b66\u4e60\u8fdb\u5ea6\uff1a [ DONE ] \u5f85\u5b66\u4e60: ! linux shell \u811a\u672c ! \u6570\u636e\u7ed3\u6784 ! \u7b97\u6cd5\u63a5\u89e6 ! Python\u6846\u67b6 ! Linux\u4e0b\u8f7d\u5de5\u5177 ! \u6b63\u5219\u8868\u8fbe\u5f0f ! k-vim \u7684i\u4e00\u952e\u5b89\u88c5\uff0c\u914d\u7f6e\uff0c\u7ba1\u7406\uff0c !\"\u5b9e\u73b0ankidroid vim \u7f16\u8f91 \u6dfb\u52a0\"","tags":"\u9ed8\u8ba4\u5206\u7c7b","loc":"http://lotaku.github.io/xue-xi-jin-du-ji-lu.html","title":"\u5b66\u4e60\u8fdb\u5ea6\u8bb0\u5f55"}]}